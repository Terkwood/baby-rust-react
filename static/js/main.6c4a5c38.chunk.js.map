{"version":3,"sources":["App.jsx","wasmLoader.js","serviceWorker.js","index.jsx","logo.svg","App.rs"],"names":["App","handleResultObjectPromise","_useState","useState","_useState2","Object","slicedToArray","result","setResult","wasm","calculateFactorial","instance","exports","fact","fetch","then","response","arrayBuffer","bytes","WebAssembly","instantiate","react_default","a","createElement","className","src","logo","alt","concat","role","aria-label","href","target","rel","Boolean","window","location","hostname","match","hashHistory","createHashHistory","basename","process","ReactDOM","render","Router","history","src_App_1","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","__webpack_require__","p"],"mappings":"qRAKA,IA2CeA,EA3CH,WAAM,ICHOC,EDGPC,EACYC,mBAAS,MADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACDI,EADCJ,EAAA,GCHOH,EDMd,SAAAQ,GACP,IAAMC,EAAqBD,EAAKE,SAASC,QAAQC,KAEjDL,EAAUE,EAJF,MCFJI,MAAM,YACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,gBAC1BF,KAAK,SAAAG,GAAK,OAAIC,YAAYC,YAAYF,EAAO,MAC7CH,KAAKd,GDUd,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cARgB,kBACpBF,EAAAC,EAAAC,cAAA,SAAIhB,EAAM,oBAAAqB,OARF,GAQE,QAAAA,OAA+BrB,GAAW,KAOhD,MACAc,EAAAC,EAAAC,cAAA,oCACyB,IACvBF,EAAAC,EAAAC,cAAA,QAAMM,KAAK,MAAMC,aAAW,QAA5B,gBAGAT,EAAAC,EAAAC,cAAA,WALF,8BAM8B,IAC5BF,EAAAC,EAAAC,cAAA,QAAMM,KAAK,MAAMC,aAAW,QAA5B,gBAGAT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVO,KAAK,8CACLC,OAAO,SACPC,IAAI,uBAJN,mDEtBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAcC,IAAkB,CAAEC,SAAUC,qBAElDC,IAASC,OACPvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAASP,GACflB,EAAAC,EAAAC,cAACwB,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,kCE/HnBC,EAAA3C,QAAiB4C,EAAAC,EAAuB,oDCAxCF,EAAA3C,QAAiB4C,EAAAC,EAAuB","file":"static/js/main.6c4a5c38.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { loadWasm } from './wasmLoader';\n\nconst App = () => {\n  const [result, setResult] = useState(null);\n  const x = 31;\n  loadWasm(wasm => {\n    const calculateFactorial = wasm.instance.exports.fact;\n\n    setResult(calculateFactorial(x));\n  });\n\n  const FactorialText = () => (\n    <p>{result ? `The factorial of ${x} is ${result}` : ''}</p>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <FactorialText />\n        <div>\n          Rendered with React.js{' '}\n          <span role=\"img\" aria-label=\"atom\">\n            ‚öõÔ∏è\n          </span>\n          <br />\n          Computed lovingly with Rust{' '}\n          <span role=\"img\" aria-label=\"crab\">\n            ü¶Ä\n          </span>\n          <br />\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/Terkwood/baby-rust-react\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            https://github.com/Terkwood/baby-rust-react\n          </a>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","import rustFile from './App.rs';\n\nexport function loadWasm(handleResultObjectPromise) {\n    switch (process.env.NODE_ENV) {\n      case 'production':\n        fetch('app.wasm')\n          .then(response => response.arrayBuffer())\n          .then(bytes => WebAssembly.instantiate(bytes, {}))\n          .then(handleResultObjectPromise);\n        break;\n      case 'development':\n        rustFile().then(handleResultObjectPromise);\n        break;\n      default:\n        break;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router';\nimport createHashHistory from 'history/createHashHistory';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst hashHistory = createHashHistory({ basename: process.env.PUBLIC_URL });\n\nReactDOM.render(\n  <Router history={hashHistory}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.12221bd5.svg\";","module.exports = __webpack_public_path__ + \"static/media/App.806e6cd9.rs\";"],"sourceRoot":""}